// Generated by CoffeeScript 1.9.2
(function() {
  (function($, window, document) {
    var AdaptableText, defaults, pluginName;
    pluginName = "adaptableText";
    defaults = {
      minFontSize: 15
    };
    AdaptableText = (function() {
      function AdaptableText(element, options) {
        this.element = element;
        this.settings = $.extend({}, defaults, options);
        this._defaults = defaults;
        this._name = pluginName;
        this.init();
        return;
      }

      AdaptableText.prototype.init = function() {
        this.reset();
        this.adapt();
      };


      /*
        Get element styles
       */

      AdaptableText.prototype.reset = function() {
        this.elementWidth = this.element.offsetWidth;
        this.styles = window.getComputedStyle(this.element);
        this.currentFontSize = +this.styles.fontSize.replace('px', '');
        this.initialFontsize = this.currentFontSize;
        this.maxCharWidth = 0;
        this._calculateMaxCharWidth();
      };


      /*
        Change element style to fit
       */

      AdaptableText.prototype.adapt = function() {
        var textWidth;
        this.text = this.element.value;
        textWidth = this._getTextWidth(this.text, this.styles.fontStyle + " " + this.currentFontSize + "px " + this.styles.fontFamily);
        this._checkSize();
        this.element.style.fontSize = this.currentFontSize + "px";
      };

      AdaptableText.prototype._checkSize = function() {
        var recursiveCheck;
        if (this._getTextWidth(this.text, this.styles.fontStyle + " " + this.currentFontSize + "px " + this.styles.fontFamily) < this.elementWidth - this.maxCharWidth) {
          recursiveCheck = (function(_this) {
            return function() {
              var textWidth;
              textWidth = _this._getTextWidth(_this.text, _this.styles.fontStyle + " " + _this.currentFontSize + "px " + _this.styles.fontFamily);
              if (_this._getTextWidth(_this.text, textWidth) < _this.elementWidth - _this.maxCharWidth && _this.currentFontSize < _this.initialFontsize) {
                _this.currentFontSize += 0.1;
                return recursiveCheck();
              } else {

              }
            };
          })(this);
        } else {
          recursiveCheck = (function(_this) {
            return function() {
              var textWidth;
              textWidth = _this._getTextWidth(_this.text, _this.styles.fontStyle + " " + _this.currentFontSize + "px " + _this.styles.fontFamily);
              if (_this._getTextWidth(_this.text, textWidth) > _this.elementWidth - _this.maxCharWidth && _this.currentFontSize > _this.settings.minFontSize) {
                _this.currentFontSize -= 0.1;
                return recursiveCheck();
              } else {

              }
            };
          })(this);
        }
        recursiveCheck();
      };


      /*
        Get text width via canvas
       */

      AdaptableText.prototype._getTextWidth = function(text, font) {
        var canvas, context, metrics;
        canvas = this.canvas || (this.canvas = document.createElement('canvas'));
        context = canvas.getContext('2d');
        context.font = font;
        metrics = context.measureText(text);
        return metrics.width;
      };


      /*
        Calculate max char width
       */

      AdaptableText.prototype._calculateMaxCharWidth = function() {
        var char, charWidth, chars, len;
        chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefhijklmnopqrstuvwxyz0123456789!?*()@Â£$%^&_-+=[]{}:;\'"\\|<>,./~`'.split('');
        len = chars.length;
        while (len--) {
          char = chars[len];
          charWidth = this._getTextWidth(char, this.styles.fontStyle + " " + this.styles.fontSize + " " + this.styles.fontFamily);
          if (charWidth > this.maxCharWidth) {
            this.maxCharWidth = charWidth;
          }
        }
      };

      return AdaptableText;

    })();
    return $.fn[pluginName] = function(options) {
      return this.each(function() {
        if (!$.data(this, "" + pluginName)) {
          return $.data(this, "" + pluginName, new AdaptableText(this, options));
        }
      });
    };
  })(jQuery, window, document);

}).call(this);
